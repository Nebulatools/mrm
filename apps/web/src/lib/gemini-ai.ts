import { GoogleGenerativeAI } from '@google/generative-ai';
import type { KPIResult } from './kpi-calculator';

export interface AIInsight {
  type: 'positive' | 'negative' | 'neutral' | 'warning';
  kpi: string;
  insight: string;
  recommendation: string;
  priority: 'high' | 'medium' | 'low';
}

export interface AIAnalysis {
  summary: string;
  insights: AIInsight[];
  overallScore: number; // 0-100
  trends: {
    improving: string[];
    declining: string[];
    stable: string[];
  };
  recommendations: string[];
}

export class GeminiAIService {
  private genAI: GoogleGenerativeAI;
  private model: ReturnType<GoogleGenerativeAI['getGenerativeModel']>;
  private cache = new Map<string, { data: AIAnalysis; timestamp: number }>();
  private readonly CACHE_TTL = 10 * 60 * 1000; // 10 minutes cache
  
  constructor() {
    // Use API key from environment variables
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || 'demo-key';
    console.log('ü§ñ Inicializando IA (gemini-1.5-flash) con API key:', apiKey !== 'demo-key' ? '‚úÖ API key configurada' : '‚ö†Ô∏è Usando modo demo');
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ 
      model: 'gemini-1.5-flash',
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048,
      }
    });
  }

  async analyzeKPIs(kpis: KPIResult[], period: string = 'monthly'): Promise<AIAnalysis> {
    console.log('ü§ñ Starting IA analysis for KPIs');
    
    const cacheKey = `analysis-${period}-${JSON.stringify(kpis.map(k => k.value))}`;
    const cached = this.cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      console.log('üìã Returning cached AI analysis');
      return cached.data;
    }

    try {
      // Check API key configuration
      const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
      if (!apiKey || apiKey === 'demo-key' || apiKey === 'your_gemini_api_key_here') {
        console.log('üé≤ Usando an√°lisis mock - API key no configurada correctamente');
        console.log('üí° Para usar IA real: Ve a https://aistudio.google.com/app/apikey y configura NEXT_PUBLIC_GEMINI_API_KEY');
        return this.generateMockAnalysis(kpis, period);
      }

      console.log('üöÄ Enviando solicitud a IA...');
      
      // Create prompt for Gemini
      const prompt = this.createAnalysisPrompt(kpis, period);
      console.log('üìù Prompt generado:', prompt.substring(0, 300) + '...');
      
      // Call Gemini API with timeout
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('IA API timeout after 30 seconds')), 30000);
      });
      
      const apiPromise = this.model.generateContent(prompt);
      
      const result = await Promise.race([apiPromise, timeoutPromise]);
      const response = (result as Awaited<ReturnType<typeof this.model.generateContent>>).response;
      
      if (!response) {
        throw new Error('No response from IA API');
      }
      
      const analysisText = response.text();
      console.log('üì¶ Respuesta de IA recibida:', analysisText.length, 'caracteres');
      
      if (!analysisText || analysisText.trim().length === 0) {
        throw new Error('Empty response from IA API');
      }
      
      // Parse the AI response into structured data
      const analysis = this.parseAIResponse(analysisText, kpis);
      
      // Cache the results
      this.cache.set(cacheKey, {
        data: analysis,
        timestamp: Date.now()
      });

      console.log('‚úÖ An√°lisis con Gemini AI completado exitosamente');
      return analysis;
      
    } catch (error) {
      console.error('‚ùå Error en an√°lisis con Gemini AI:', error);
      
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      if (errorMessage.includes('API_KEY_INVALID')) {
        console.error('üîë API key de Gemini inv√°lida - verifica tu configuraci√≥n');
      } else if (errorMessage.includes('QUOTA_EXCEEDED')) {
        console.error('üìä Cuota de Gemini excedida - espera o verifica tu cuenta');
      } else if (errorMessage.includes('timeout')) {
        console.error('‚è±Ô∏è Timeout de Gemini - la API tard√≥ demasiado');
      } else {
        console.error('üö® Error desconocido:', errorMessage);
      }
      
      // Fallback to enhanced mock analysis
      console.log('üîÑ Usando an√°lisis mock mejorado como fallback');
      return {
        ...this.generateMockAnalysis(kpis, period),
        summary: `ü§ñ An√°lisis alternativo generado (Error de API): ${this.generateMockAnalysis(kpis, period).summary}`
      };
    }
  }

  private createAnalysisPrompt(kpis: KPIResult[], period: string): string {
    // Crear an√°lisis detallado de cada KPI con contexto empresarial
    const kpiAnalysis = kpis.map(kpi => {
      const change = kpi.variance_percentage || 0;
      const status = change > 5 ? 'üìà MEJORANDO' : change < -5 ? 'üìâ EMPEORANDO' : '‚û°Ô∏è ESTABLE';
      const vsTarget = kpi.target ? ` | Meta: ${kpi.target} ${kpi.value > kpi.target ? '‚ö†Ô∏è EXCEDE' : '‚úÖ DENTRO'}` : '';
      
      return `‚Ä¢ ${kpi.name}: ${kpi.value} ${status} (${change > 0 ? '+' : ''}${change.toFixed(1)}%)${vsTarget}`;
    }).join('\n');

    // Calcular m√©tricas de rendimiento
    const totalKpis = kpis.length;
    const improving = kpis.filter(k => (k.variance_percentage || 0) > 5).length;
    const declining = kpis.filter(k => (k.variance_percentage || 0) < -5).length;
    const onTarget = kpis.filter(k => k.target && k.value <= k.target).length;
    const withTargets = kpis.filter(k => k.target).length;

    return `
Eres un EXPERTO ANALISTA DE RECURSOS HUMANOS con 15+ a√±os de experiencia en an√°lisis de KPIs corporativos y gesti√≥n de talento. Analiza estos datos del per√≠odo ${period} y proporciona insights avanzados como consultor senior de RRHH.

üìä DATOS DE KPIs EMPRESARIALES:
${kpiAnalysis}

üìà M√âTRICAS DE RENDIMIENTO:
- Total KPIs analizados: ${totalKpis}
- KPIs mejorando: ${improving} (${((improving/totalKpis)*100).toFixed(1)}%)
- KPIs empeorando: ${declining} (${((declining/totalKpis)*100).toFixed(1)}%)
- KPIs dentro de meta: ${onTarget}/${withTargets} ${withTargets > 0 ? `(${((onTarget/withTargets)*100).toFixed(1)}%)` : ''}

üéØ CONTEXTO EMPRESARIAL:
- Industria: Recursos Humanos y gesti√≥n de talento
- Per√≠odo: ${period}
- F√≥rmulas: Est√°ndares internacionales de RRHH (SHRM, CIPD)
- Benchmarks: Comparaci√≥n vs per√≠odo anterior y metas establecidas

‚ö° AN√ÅLISIS REQUERIDO (RESPONDE SOLO JSON):
{
  "summary": "An√°lisis ejecutivo del estado de RRHH en 2-3 oraciones con insights clave y contexto de negocio",
  "overallScore": n√∫mero_entero_0_a_100,
  "insights": [
    {
      "type": "positive|negative|warning|neutral",
      "kpi": "nombre_exacto_del_kpi",
      "insight": "An√°lisis profesional espec√≠fico con datos cuantitativos y impacto en el negocio",
      "recommendation": "Acci√≥n concreta y espec√≠fica con timeline y responsables sugeridos",
      "priority": "high|medium|low"
    }
  ],
  "trends": {
    "improving": ["lista_de_kpis_con_tendencia_positiva"],
    "declining": ["lista_de_kpis_con_tendencia_negativa"], 
    "stable": ["lista_de_kpis_estables"]
  },
  "recommendations": [
    "Recomendaci√≥n estrat√©gica 1: Espec√≠fica y accionable con timeline",
    "Recomendaci√≥n estrat√©gica 2: Con KPIs impactados y responsables",
    "Recomendaci√≥n estrat√©gica 3: Con m√©tricas de √©xito y ROI esperado",
    "Recomendaci√≥n estrat√©gica 4: Con riesgos identificados y mitigaci√≥n"
  ]
}

IMPORTANTE: 
- Analiza patrones entre KPIs (ej: si rotaci√≥n ‚Üë entonces incidencias ‚Üë)
- Considera seasonality y contexto del per√≠odo
- Proporciona insights cuantitativos espec√≠ficos
- Incluye benchmark vs industria cuando sea relevante
- RESPONDE √öNICAMENTE EL JSON, SIN MARKDOWN NI TEXTO ADICIONAL
`;
  }

  private parseAIResponse(response: string, kpis: KPIResult[]): AIAnalysis {
    try {
      console.log('ü§ñ Raw Gemini response:', response.substring(0, 200) + '...');
      
      // Clean the response - remove markdown, extra whitespace, and common prefixes
      let cleanResponse = response
        .replace(/```json|```/g, '')
        .replace(/^(Here's the analysis:|Here is the analysis:|Analysis:|JSON:)/i, '')
        .trim();
      
      // Find JSON object in response
      const jsonStart = cleanResponse.indexOf('{');
      const jsonEnd = cleanResponse.lastIndexOf('}');
      
      if (jsonStart !== -1 && jsonEnd !== -1) {
        cleanResponse = cleanResponse.substring(jsonStart, jsonEnd + 1);
      }
      
      console.log('üßπ Cleaned response for parsing:', cleanResponse.substring(0, 200) + '...');
      
      const parsed = JSON.parse(cleanResponse);
      
      // Validate required fields and provide defaults
      const analysis: AIAnalysis = {
        summary: parsed.summary || 'An√°lisis generado por Gemini AI',
        overallScore: typeof parsed.overallScore === 'number' ? 
          Math.max(0, Math.min(100, parsed.overallScore)) : 75,
        insights: Array.isArray(parsed.insights)
          ? parsed.insights.map((insight: unknown) => {
              const record = (typeof insight === 'object' && insight !== null)
                ? insight as Record<string, unknown>
                : {};

              const allowedTypes: AIInsight['type'][] = ['positive', 'negative', 'warning', 'neutral'];
              const rawType = typeof record.type === 'string' ? record.type.toLowerCase() : '';
              const type: AIInsight['type'] = allowedTypes.includes(rawType as AIInsight['type'])
                ? rawType as AIInsight['type']
                : 'neutral';

              const kpi = typeof record.kpi === 'string' && record.kpi.trim().length > 0
                ? record.kpi
                : 'KPI General';

              const insightText = typeof record.insight === 'string' && record.insight.trim().length > 0
                ? record.insight
                : 'An√°lisis no disponible';

              const recommendationText = typeof record.recommendation === 'string' && record.recommendation.trim().length > 0
                ? record.recommendation
                : 'Recomendaci√≥n no disponible';

              const allowedPriorities: AIInsight['priority'][] = ['high', 'medium', 'low'];
              const rawPriority = typeof record.priority === 'string' ? record.priority.toLowerCase() : '';
              const priority: AIInsight['priority'] = allowedPriorities.includes(rawPriority as AIInsight['priority'])
                ? rawPriority as AIInsight['priority']
                : 'medium';

              return {
                type,
                kpi,
                insight: insightText,
                recommendation: recommendationText,
                priority
              };
            })
          : [],
        trends: {
          improving: Array.isArray(parsed.trends?.improving) ? parsed.trends.improving : [],
          declining: Array.isArray(parsed.trends?.declining) ? parsed.trends.declining : [],
          stable: Array.isArray(parsed.trends?.stable) ? parsed.trends.stable : []
        },
        recommendations: Array.isArray(parsed.recommendations) ? 
          parsed.recommendations.slice(0, 6) : [] // Limit to 6 recommendations
      };
      
      console.log('‚úÖ Successfully parsed Gemini AI analysis:', {
        summary: analysis.summary.substring(0, 50) + '...',
        score: analysis.overallScore,
        insights: analysis.insights.length,
        recommendations: analysis.recommendations.length
      });
      
      return analysis;
      
    } catch (error) {
      console.error('‚ùå Error parsing IA response:', error);
      console.log('üîÑ Falling back to mock analysis');
      
      // Fallback to mock analysis with notification
      return {
        ...this.generateMockAnalysis(kpis, 'monthly'),
        summary: `‚ö†Ô∏è Error al procesar respuesta de IA. Usando an√°lisis alternativo: ${this.generateMockAnalysis(kpis, 'monthly').summary}`
      };
    }
  }

  private generateMockAnalysis(kpis: KPIResult[], period: string): AIAnalysis {
    const insights: AIInsight[] = [];
    const improving: string[] = [];
    const declining: string[] = [];
    const stable: string[] = [];

    // Generate insights based on KPI data
    kpis.forEach(kpi => {
      const variance = kpi.variance_percentage || 0;
      
      if (variance > 10) {
        improving.push(kpi.name);
        insights.push({
          type: 'positive',
          kpi: kpi.name,
          insight: `${kpi.name} muestra una mejora significativa del ${variance.toFixed(1)}% respecto al per√≠odo anterior.`,
          recommendation: `Continuar con las estrategias actuales para mantener esta tendencia positiva en ${kpi.name}.`,
          priority: 'medium'
        });
      } else if (variance < -10) {
        declining.push(kpi.name);
        insights.push({
          type: 'negative',
          kpi: kpi.name,
          insight: `${kpi.name} presenta una disminuci√≥n del ${Math.abs(variance).toFixed(1)}%, lo cual requiere atenci√≥n.`,
          recommendation: `Implementar un plan de acci√≥n para mejorar ${kpi.name} y revertir la tendencia negativa.`,
          priority: 'high'
        });
      } else {
        stable.push(kpi.name);
      }

      // Check if KPI exceeds target
      if (kpi.target && kpi.value > kpi.target) {
        insights.push({
          type: 'warning',
          kpi: kpi.name,
          insight: `${kpi.name} (${kpi.value}) excede la meta establecida (${kpi.target}).`,
          recommendation: `Revisar las causas del exceso en ${kpi.name} y ajustar estrategias si es necesario.`,
          priority: 'high'
        });
      }
    });

    // Calculate overall score based on performance
    const positiveCount = improving.length;
    const negativeCount = declining.length;
    const overallScore = Math.max(20, Math.min(95, 75 + (positiveCount * 10) - (negativeCount * 15)));

    return {
      summary: `Durante el per√≠odo ${period}, se observa un rendimiento ${overallScore > 80 ? 'excelente' : overallScore > 60 ? 'bueno' : 'que requiere atenci√≥n'} en los KPIs de RRHH. ${positiveCount > 0 ? `${positiveCount} indicadores muestran mejoras,` : ''} ${negativeCount > 0 ? `${negativeCount} requieren atenci√≥n inmediata.` : 'La mayor√≠a de indicadores mantienen estabilidad.'}`,
      overallScore,
      insights,
      trends: {
        improving,
        declining,
        stable
      },
      recommendations: [
        'Establecer revisiones quincenales de KPIs cr√≠ticos para detectar tendencias temprano',
        'Implementar programas de retenci√≥n espec√≠ficos para reducir la rotaci√≥n de personal',
        'Crear sistema de alertas autom√°ticas cuando los KPIs excedan umbrales establecidos',
        'Desarrollar planes de acci√≥n espec√≠ficos para KPIs con tendencia negativa'
      ]
    };
  }

  // Advanced method to analyze charts and trends
  async analyzeChartTrends(kpis: KPIResult[], chartType: string = 'line'): Promise<string> {
    console.log('üìä Iniciando an√°lisis avanzado de gr√°ficas con IA');
    
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    if (!apiKey || apiKey === 'demo-key' || apiKey === 'your_gemini_api_key_here') {
      return 'An√°lisis de gr√°ficas no disponible - API key de IA no configurada';
    }

    try {
      const chartData = kpis.map(kpi => ({
        name: kpi.name,
        value: kpi.value,
        change: kpi.variance_percentage || 0,
        target: kpi.target,
        category: kpi.category
      }));

      const prompt = `
Como EXPERTO en an√°lisis de datos y visualizaci√≥n empresarial, analiza las siguientes m√©tricas de RRHH representadas en gr√°ficas tipo ${chartType}:

üìä DATOS PARA AN√ÅLISIS DE GR√ÅFICAS:
${chartData.map(item => `‚Ä¢ ${item.name}: ${item.value} (${item.change > 0 ? '+' : ''}${item.change.toFixed(1)}%) [${item.category}]`).join('\n')}

üéØ AN√ÅLISIS REQUERIDO:
Proporciona un an√°lisis profesional de las tendencias visuales, patrones en las gr√°ficas, y correlaciones entre m√©tricas. Incluye:
1. Patrones visuales identificados en los datos
2. Correlaciones entre diferentes KPIs
3. Tendencias temporales y estacionalidad
4. Anomal√≠as o puntos de inflexi√≥n
5. Proyecciones basadas en las tendencias actuales

Responde con un an√°lisis narrativo profesional de m√°ximo 250 palabras.
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const analysisText = response.text();

      console.log('‚úÖ An√°lisis de gr√°ficas completado');
      return analysisText;

    } catch (error) {
      console.error('‚ùå Error en an√°lisis de gr√°ficas:', error);
      return 'Error al analizar las tendencias de las gr√°ficas. Intenta nuevamente.';
    }
  }

  // Test connection to Gemini AI
  async testConnection(): Promise<{ success: boolean; message: string; responseTime?: number }> {
    const startTime = Date.now();
    
    try {
      const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
      if (!apiKey || apiKey === 'demo-key' || apiKey === 'your_gemini_api_key_here') {
        return {
          success: false,
          message: 'API key de Gemini no configurada. Ve a https://aistudio.google.com/app/apikey'
        };
      }

      console.log('üß™ Testeando conexi√≥n con Gemini AI...');
      
      const testPrompt = 'Responde con exactamente: "Conexi√≥n exitosa con Gemini AI"';
      const result = await this.model.generateContent(testPrompt);
      const response = await result.response;
      const text = response.text();

      const responseTime = Date.now() - startTime;

      if (text.includes('Conexi√≥n exitosa') || text.includes('exitosa')) {
        return {
          success: true,
          message: `‚úÖ Gemini AI funcionando correctamente (${responseTime}ms)`,
          responseTime
        };
      } else {
        return {
          success: true,
          message: `‚úÖ Gemini AI responde pero con formato inesperado (${responseTime}ms): ${text.substring(0, 100)}...`,
          responseTime
        };
      }
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      return {
        success: false,
        message: `‚ùå Error de conexi√≥n (${responseTime}ms): ${errorMessage}`,
        responseTime
      };
    }
  }

  // Method to get personalized recommendations for specific KPIs
  async getKPIRecommendations(kpi: KPIResult): Promise<string[]> {
    if (!process.env.NEXT_PUBLIC_GEMINI_API_KEY || process.env.NEXT_PUBLIC_GEMINI_API_KEY === 'demo-key') {
      return this.getMockRecommendations(kpi);
    }

    try {
      const prompt = `
Como experto en RRHH, proporciona 3 recomendaciones espec√≠ficas para mejorar este KPI:

KPI: ${kpi.name}
Valor actual: ${kpi.value}
${kpi.previous_value ? `Valor anterior: ${kpi.previous_value} (cambio: ${kpi.variance_percentage?.toFixed(1)}%)` : ''}
${kpi.target ? `Meta: ${kpi.target}` : ''}

Responde con una lista de 3 recomendaciones espec√≠ficas y accionables.
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const recommendations = response.text().split('\n').filter(line => line.trim().length > 0);
      
      return recommendations.slice(0, 3);
    } catch (error) {
      console.error('Error getting KPI recommendations:', error);
      return this.getMockRecommendations(kpi);
    }
  }

  private getMockRecommendations(kpi: KPIResult): string[] {
    const recommendations: { [key: string]: string[] } = {
      'Activos': [
        'Revisar planes de contrataci√≥n y crecimiento del equipo',
        'Optimizar procesos de onboarding para nuevos empleados',
        'Evaluar la carga de trabajo actual vs capacidad del equipo'
      ],
      'Bajas': [
        'Implementar programa de retenci√≥n de talento',
        'Realizar entrevistas de salida para identificar patrones',
        'Mejorar beneficios y ambiente laboral'
      ],
      'Rotaci√≥n Mensual': [
        'Analizar causas de rotaci√≥n por departamento',
        'Implementar plan de carrera y desarrollo profesional',
        'Mejorar proceso de selecci√≥n para mejor fit cultural'
      ],
      'Incidencias': [
        'Establecer protocolo de seguimiento de incidencias',
        'Implementar capacitaci√≥n preventiva',
        'Crear sistema de alertas tempranas'
      ],
      'default': [
        'Establecer metas espec√≠ficas y medibles para este KPI',
        'Implementar seguimiento regular y reportes',
        'Crear plan de acci√≥n basado en an√°lisis de tendencias'
      ]
    };

    return recommendations[kpi.name] || recommendations['default'];
  }
}

// Export singleton instance
export const geminiAI = new GeminiAIService();
